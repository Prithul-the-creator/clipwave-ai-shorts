#!/usr/bin/env python3
"""
Simple YouTube Cookie Extractor

This script helps you manually extract YouTube cookie values from your browser.
"""

import base64
from pathlib import Path

def create_cookie_template():
    """Create a template cookies file with instructions"""
    
    template = """# Netscape HTTP Cookie File
# This file is generated by yt-dlp.  Do not edit.
#
# INSTRUCTIONS:
# 1. Open YouTube in your browser
# 2. Open Developer Tools (F12)
# 3. Go to Application/Storage ‚Üí Cookies ‚Üí youtube.com
# 4. Copy the values below and replace the placeholders
# 5. Save this file and run: python process_cookies.py

.youtube.com	TRUE	/	FALSE	1735689600	VISITOR_INFO1_LIVE	REPLACE_WITH_ACTUAL_VALUE
.youtube.com	TRUE	/	FALSE	1735689600	PREF	f4=4000000&tz=America.New_York
.youtube.com	TRUE	/	FALSE	1735689600	LOGIN_INFO	REPLACE_WITH_ACTUAL_VALUE
.youtube.com	TRUE	/	FALSE	1735689600	SID	REPLACE_WITH_ACTUAL_VALUE
.youtube.com	TRUE	/	FALSE	1735689600	HSID	REPLACE_WITH_ACTUAL_VALUE
.youtube.com	TRUE	/	FALSE	1735689600	SSID	REPLACE_WITH_ACTUAL_VALUE
.youtube.com	TRUE	/	FALSE	1735689600	APISID	REPLACE_WITH_ACTUAL_VALUE
.youtube.com	TRUE	/	FALSE	1735689600	SAPISID	REPLACE_WITH_ACTUAL_VALUE
"""
    
    # Create cookies directory
    cookies_dir = Path("cookies")
    cookies_dir.mkdir(exist_ok=True)
    
    # Write template
    template_file = cookies_dir / "youtube_cookies_template.txt"
    with open(template_file, 'w', encoding='utf-8') as f:
        f.write(template)
    
    print(f"‚úÖ Cookie template created: {template_file}")
    print("\nüìã Next steps:")
    print("1. Open YouTube in your browser")
    print("2. Open Developer Tools (F12)")
    print("3. Go to Application/Storage ‚Üí Cookies ‚Üí youtube.com")
    print("4. Copy the actual cookie values")
    print("5. Replace 'REPLACE_WITH_ACTUAL_VALUE' in the template")
    print("6. Save as 'cookies/youtube_cookies.txt'")
    print("7. Run: python process_cookies.py")
    
    return template_file

def process_cookies():
    """Process the cookies file and create base64 version"""
    
    cookies_file = Path("cookies/youtube_cookies.txt")
    
    if not cookies_file.exists():
        print("‚ùå cookies/youtube_cookies.txt not found")
        print("   Please create it first using the template")
        return None
    
    # Read and validate cookies
    with open(cookies_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Check for placeholder values
    if "REPLACE_WITH_ACTUAL_VALUE" in content:
        print("‚ùå Cookie file still contains placeholder values")
        print("   Please replace them with actual cookie values from your browser")
        return None
    
    # Encode to base64
    encoded = base64.b64encode(content.encode('utf-8')).decode('utf-8')
    
    # Save base64 version
    b64_file = Path("cookies/youtube_cookies_b64.txt")
    with open(b64_file, 'w', encoding='utf-8') as f:
        f.write(encoded)
    
    # Create environment example
    env_content = f"""# ClipWave AI Shorts Environment Variables

# OpenAI API Key (required)
OPENAI_API_KEY=your_openai_api_key_here

# YouTube Cookies (base64 encoded)
YOUTUBE_COOKIES_B64={encoded}

# Optional: YouTube Cookies File Path (for local development)
YOUTUBE_COOKIES_FILE=cookies/youtube_cookies.txt
"""
    
    env_file = Path(".env.example")
    with open(env_file, 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print("‚úÖ Cookies processed successfully!")
    print(f"   Base64 file: {b64_file}")
    print(f"   Environment example: {env_file}")
    print(f"   Base64 length: {len(encoded)} characters")
    
    return encoded

def test_cookies():
    """Test the cookies with yt-dlp"""
    
    import subprocess
    
    print("\nüß™ Testing cookies...")
    
    cookies_file = Path("cookies/youtube_cookies.txt")
    if not cookies_file.exists():
        print("‚ùå No cookies file to test")
        return False
    
    test_url = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
    test_output = "test_video.mp4"
    
    cmd = [
        'yt-dlp',
        '--cookies', str(cookies_file),
        '--format', 'best[height<=480]',
        '--output', test_output,
        '--quiet',
        test_url
    ]
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0 and Path(test_output).exists():
            file_size = Path(test_output).stat().st_size
            print(f"‚úÖ Test successful! Downloaded {file_size} bytes")
            
            # Clean up
            Path(test_output).unlink()
            print("‚úÖ Test file cleaned up")
            return True
        else:
            print("‚ùå Test failed")
            print(f"   Error: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Test error: {e}")
        return False

def main():
    """Main function"""
    print("üç™ YouTube Cookie Extractor")
    print("=" * 40)
    
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "template":
            create_cookie_template()
        elif command == "process":
            process_cookies()
        elif command == "test":
            test_cookies()
        else:
            print("‚ùå Unknown command. Use: template, process, or test")
    else:
        print("Usage:")
        print("  python get_youtube_cookies.py template  # Create template")
        print("  python get_youtube_cookies.py process   # Process cookies")
        print("  python get_youtube_cookies.py test      # Test cookies")
        print("\nOr run without arguments to see this help")

if __name__ == "__main__":
    main() 